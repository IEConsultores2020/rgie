<%= link_to planvisitum.puntoventum.name , visitum.new(horasalid: Date.today, user_id: planvisitum.usuarioasignado, puntoventum_id: planvisitum.puntoventum_id, planvisitum_id: planvisitum.id) , :class => "ui-btn ui-shadow ui-corner-all ui-icon-eye ui-btn-icon-left", id: "new_link", remote: true %>

$ bin/rails generate migration RemoveHusoFromDepartamento huso:date

$ bin/rails generate migration AddHusoToPais huso:string

$   

rails g migration AddDetailsFromVisitum puntoventum:belongs_to
rails g migration AddDetailsFromVisitum planvisitum:belongs_to

rake db:migrate

4.655609,-74.090783

4°39'20.2"N+74°05'26.8"W/@4.6486259,-74.2482352,11

collection_select(
    :post, # field namespace 
    :author_id, # field name
    # result of these two params will be: <select name="post[author_id]">...

    # then you should specify some collection or array of rows.
    # It can be Author.where(..).order(..) or something like that. 
    # In your example it is:
    Author.all, 

    # then you should specify methods for generating options
    :id, # this is name of method that will be called for every row, result will be set as key
    :name_with_initial, # this is name of method that will be called for every row, result will be set as value

    # as a result, every option will be generated by the following rule: 
    # <option value=#{author.id}>#{author.name_with_initial}</option>
    # 'author' is an element in the collection or array

    :prompt => true # then you can specify some params. You can find them in the docs.
)

collection_select(
 
 planvisitum.where(:current_user_id = usuarioasignado)),


@time1 = Time.now


f.collection_select 


    <%= f.collection_select :usuarioasignado, User.order(:name), :id, :name, include_blank: true %>
    <%= f.collection_select :usuarioasignado, :ciudad_id, User.order(:nmae), :id, :name_for_select %>


     @users = User.joins(:ciudad => :region, :rol).where("region_id =  ? and role.name in (?) ", current_user.ciudad.region_id, ['supervisor','merchandizer','promoter'])


           @users = User.joins(:ciudad => :region).where("region_id =  ? and 't' in (?)", 
               current_user.ciudad.region_id,
               [:promoter,:merchandizer,:supervisor]).order(:name)

     <p>
     <% if mobile_device? %>
       <%= link_to "Full Site", :mobile => 0 %>
     <% else %>
       <%= link_to "Mobile Site", :mobile => 1 %>
     <% end %>
    </p>
               


<% if is_mobile_device? %>
   <h2>Modo mobile</h2>
<% else %>   
<h2><%= link_to 'Entrada a PV', new_visitum_path,:class => "btn btn-lg btn-primary" %> <%= link_to 'Salida de PV', puntoventa_path, :class => "btn btn-lg btn-primary" %></h2>
<% end %>               


<h0>Registro Diario (Móvil)</h0>
<h6>Para Representantes, mercaderistas y promotores </h6>
<h6>- Regìstro entrada y salidas a los puntos de visita</h6>
<h6>- Registro de ventas en los puntos de visita</h6>

if current_user.promoter? then
     num_open_visita = Visitum.where("user_id = ?", current_user).count
     if num_open_visita = 0 then

        today_date = Date.today

       # @visita = Visitum.joins(:plan_visitum => :puntoventum).where("fecha_visita=? AND usuario_asignado =?", today_date, current_user.user_id)
     else
      @visita = null
     end 
   else
    @visita = null
   end

   --------------------


   Index
   <% for visitum in @visita%>
    <li class="arrow">
      <%= link_to h(visitum.puntoventum.name), visitum %><br>
      <%= visitum.horaingreso.to_time.strftime('%B %e at %l:%M %p') %><br>
      <%= visitum.horasalida.to_time.strftime('%B %e at %l:%M %p') %><br>
      <%= visitum.user.name %><br>
      <%= link_to 'Show', visitum %><br>
    </li>
  <% end %>


          <%= link_to "Edit Profile", nil, :class => "button" %><%= link_to "Sign up", new_user_registration_path %>             
        <%= link_to "Sign out", nil, :class => "button" %><%= link_to "Sign out", destroy_user_session_path, :method => :get %>     

rails g migration AddNumdocToUser mumdoc:string

rails g migration AddLatitude2AndLongitude2ToVisitum latitude2:float longitude2:float

rake db:migrate 

rails generate migration RemoveNumdocFromUser NumDoc:string

rails g migration AddNumdocToUser mumdoc:string

-----------------

  <%= f.collection_select :puntoventum_id, @planvisita, :puntoventum_id, :id, include_blank: false , :prompt => "Please Select a Punto Ventum" ,  :multiple =>  false %>


  rails g migration modify_visitum_horaingreso :hora_ingreso, :date, :datetime


  rails generate migration RemoveHoraingresoFromVisitum horaingreso:date

  rails generate migration RemoveHorasalidaFromVisitum horasalida:date



  rails generate migration AddHoraingresoToVisitum horaingreso:datetime

  rails generate migration AddHorasalidaToVisitum horasalida:datetime

  rails generate migration AddIPinToVisitum IPin:string

  rails generate migration AddIPoutToVisitum IPout:string

